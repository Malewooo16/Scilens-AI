// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?  @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?  
  id_token          String? @db.LongText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Existing fields from your original User model
  // password    String // Auth.js handles password hashing, so this might not be needed directly
  role        UserRole        @default(STUDENT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  searches    ResearchQuery[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id             String        @id @default(cuid())
  title          String
  content        String        @db.LongText
  sourceUrl      String?
  metadata       Json?
  uploadedAt     DateTime      @default(now())
  userId         String

  embeddings   Embedding[]

  researchQueryId String
  researchQuery   ResearchQuery @relation(fields: [researchQueryId], references: [id], onDelete: Cascade)
}

model Embedding {
  id          String     @id @default(cuid())
  embeddings Unsupported("vector(1536)")
  chunkText   String  @db.LongText
  metadata    Json?
  documentId  String
  document    Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
}


model ResearchQuery {
  id              String        @id @default(cuid())
  originalQuery   String
  enhancedQuery   String?       @db.Text
  title           String?
  createdAt       DateTime      @default(now())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  background      String?
  methodology     String?
  wayForward      String?
  matchedDocs     Json?
  knowledgeGraph  Json?
  visualizations  Json?
  summary         String?       @db.Text
  report          String?       @db.Text
  gaps            String?       @db.Text
  table           String?       @db.Text

  //relations
  documents   Document[]
}



enum UserRole {
  STUDENT
  ADMIN
}